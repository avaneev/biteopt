// NIST/ITL StRD Non-Linear Least Squares test
// https://github.com/lmfit/lmfit-py/tree/master/NIST_STRD

#include <stdio.h>
#include "tester.h"
#include "../biteopt.h"

static double calcNistBennett5( const double* const x, const int N )
{
	const int pn = 154;
	static const double py[] = {
		-34.8347, -34.3932, -34.1529, -33.9791, -33.8459, -33.7329, -33.6403, -33.5592, -33.4868, -33.4231, -33.3651, -33.313, -33.2609, -33.2174, -33.1769, -33.1392, -33.1016, -33.0668, -33.035, -33.0031, -32.9713, -32.9423, -32.9163, -32.8902, -32.8641, -32.841, -32.8178, -32.7975, -32.7743, -32.757, -32.7338, -32.7164, -32.6991, -32.6788, -32.6614, -32.644, -32.6267, -32.6122, -32.5977, -32.5832, -32.5687, -32.5543, -32.5398, -32.5253, -32.5108, -32.4992, -32.4876, -32.4732, -32.4616, -32.4355, -32.4355, -32.4268, -32.4123, -32.4008, -32.3921, -32.3805, -32.366, -32.3573, -32.3486, -32.3399, -32.3284, -32.3197, -32.311, -32.2994, -32.2907, -32.282, -32.2733, -32.2646, -32.256, -32.2473, -32.2386, -32.2299, -32.2241, -32.2154, -32.2038, -32.198, -32.1894, -32.1836, -32.1749, -32.1691, -32.1633, -32.1546, -32.1459, -32.1401, -32.1314, -32.1256, -32.1198, -32.1112, -32.1054, -32.0967, -32.0909, -32.088, -32.0793, -32.0735, -32.0677, -32.0619, -32.0561, -32.0503, -32.0445, -32.0388, -32.033, -32.0272, -32.0243, -32.0185, -32.0127, -32.004, -32.0011, -31.9953, -31.9895, -31.9837, -31.9779, -31.9721, -31.9693, -31.9635, -31.9577, -31.9519, -31.9461, -31.9403, -31.9374, -31.9316, -31.9258, -31.9229, -31.9171, -31.9113, -31.9084, -31.9026, -31.8969, -31.894, -31.8882, -31.8853, -31.8824, -31.8766, -31.8737, -31.8679, -31.8621, -31.8592, -31.8563, -31.8505, -31.8447, -31.8418, -31.8389, -31.8331, -31.8302, -31.8273, -31.8216, -31.8187, -31.8129, -31.81, -31.8071, -31.8013, -31.7984, -31.7955, -31.7897, -31.7868, };

	static const double px[] = {
		7.44717, 8.10259, 8.45255, 8.71128, 8.91677, 9.08715, 9.23259, 9.35953, 9.47217, 9.57338, 9.66529, 9.74946, 9.82709, 9.89913, 9.96632, 10.0293, 10.0885, 10.1444, 10.1974, 10.2477, 10.2956, 10.3413, 10.385, 10.4268, 10.467, 10.5056, 10.5428, 10.5787, 10.6133, 10.6468, 10.6792, 10.7105, 10.7409, 10.7704, 10.7991, 10.827, 10.8541, 10.8805, 10.9062, 10.9313, 10.9557, 10.9796, 11.0029, 11.0257, 11.048, 11.0698, 11.0911, 11.112, 11.1324, 11.1525, 11.1721, 11.1914, 11.2103, 11.2289, 11.2471, 11.265, 11.2826, 11.2998, 11.3168, 11.3335, 11.3499, 11.3661, 11.382, 11.3977, 11.4131, 11.4282, 11.4432, 11.4579, 11.4724, 11.4868, 11.5009, 11.5148, 11.5285, 11.542, 11.5554, 11.5686, 11.5816, 11.5944, 11.6071, 11.6196, 11.632, 11.6442, 11.6563, 11.6682, 11.68, 11.6916, 11.7031, 11.7145, 11.7258, 11.7369, 11.7479, 11.7588, 11.7696, 11.7802, 11.7907, 11.8012, 11.8115, 11.8217, 11.8318, 11.8418, 11.8517, 11.8615, 11.8713, 11.8809, 11.8904, 11.8999, 11.9092, 11.9185, 11.9277, 11.9368, 11.9458, 11.9547, 11.9636, 11.9724, 11.9811, 11.9897, 11.9983, 12.0067, 12.0152, 12.0235, 12.0318, 12.04, 12.0481, 12.0562, 12.0642, 12.0721, 12.08, 12.0878, 12.0956, 12.1033, 12.1109, 12.1185, 12.126, 12.1335, 12.1409, 12.1483, 12.1556, 12.1628, 12.17, 12.1772, 12.1843, 12.1913, 12.1983, 12.2053, 12.2122, 12.219, 12.2258, 12.2326, 12.2393, 12.246, 12.2526, 12.2592, 12.2658, 12.2722, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*pow(x[1]+px[i],-1/x[2]);
		s += d * d;
	}

	return( s );
}

static void calcNistBennett5_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = -4794.7; maxv[ 0 ] = -252.35;
	minv[ 1 ] = 4.6737; maxv[ 1 ] = 88.799;
	minv[ 2 ] = 0.093218; maxv[ 2 ] = 1.7712;

	*optv = 5.2404744073e-004;
}

static const CTestFn TestFnNistBennett5 = { "NistBennett5", 3, 0.0, 0.0,
	0.0, &calcNistBennett5, &calcNistBennett5_p };

static double calcNistBoxBOD( const double* const x, const int N )
{
	const int pn = 6;
	static const double py[] = {
		109, 149, 149, 191, 213, 224, };

	static const double px[] = {
		1, 2, 3, 5, 7, 10, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*(1-exp(-x[1]*px[i]));
		s += d * d;
	}

	return( s );
}

static void calcNistBoxBOD_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 21.381; maxv[ 0 ] = 406.24;
	minv[ 1 ] = 0.054724; maxv[ 1 ] = 1.0398;

	*optv = 1.1680088766e+003;
}

static const CTestFn TestFnNistBoxBOD = { "NistBoxBOD", 2, 0.0, 0.0,
	0.0, &calcNistBoxBOD, &calcNistBoxBOD_p };

static double calcNistChwirut1( const double* const x, const int N )
{
	const int pn = 214;
	static const double py[] = {
		92.9, 78.7, 64.2, 64.9, 57.1, 43.3, 31.1, 23.6, 31.05, 23.775, 17.7375, 13.8, 11.5875, 9.4125, 7.725, 7.35, 8.025, 90.6, 76.9, 71.6, 63.6, 54, 39.2, 29.3, 21.4, 29.175, 22.125, 17.5125, 14.25, 9.45, 9.15, 7.9125, 8.475, 6.1125, 80, 79, 63.8, 57.2, 53.2, 42.5, 26.8, 20.4, 26.85, 21, 16.4625, 12.525, 10.5375, 8.5875, 7.125, 6.1125, 5.9625, 74.1, 67.3, 60.8, 55.5, 50.3, 41, 29.4, 20.4, 29.3625, 21.15, 16.7625, 13.2, 10.875, 8.175, 7.35, 5.9625, 5.625, 81.5, 62.4, 32.5, 12.41, 13.12, 15.56, 5.63, 78, 59.9, 33.2, 13.84, 12.75, 14.62, 3.94, 76.8, 61, 32.9, 13.87, 11.81, 13.31, 5.44, 78, 63.5, 33.8, 12.56, 5.63, 12.75, 13.12, 5.44, 76.8, 60, 47.8, 32, 22.2, 22.57, 18.82, 13.95, 11.25, 9, 6.67, 75.8, 62, 48.8, 35.2, 20, 20.32, 19.31, 12.75, 10.42, 7.31, 7.42, 70.5, 59.5, 48.5, 35.8, 21, 21.67, 21, 15.64, 8.17, 8.55, 10.12, 78, 66, 62, 58, 47.7, 37.8, 20.2, 21.07, 13.87, 9.67, 7.76, 5.44, 4.87, 4.01, 3.75, 24.19, 25.76, 18.07, 11.81, 12.07, 16.12, 70.8, 54.7, 48, 39.8, 29.8, 23.7, 29.62, 23.81, 17.7, 11.55, 12.07, 8.74, 80.7, 61.3, 47.5, 29, 24, 17.7, 24.56, 18.67, 16.24, 8.74, 7.87, 8.51, 66.7, 59.2, 40.8, 30.7, 25.7, 16.3, 25.99, 16.95, 13.35, 8.62, 7.2, 6.64, 13.69, 81, 64.5, 35.5, 13.31, 4.87, 12.94, 5.06, 15.19, 14.62, 15.64, 25.5, 25.95, 81.7, 61.6, 29.8, 29.81, 17.17, 10.39, 28.4, 28.69, 81.3, 60.9, 16.65, 10.05, 28.9, 28.95, };

	static const double px[] = {
		0.5, 0.625, 0.75, 0.875, 1, 1.25, 1.75, 2.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5.25, 5.75, 0.5, 0.625, 0.75, 0.875, 1, 1.25, 1.75, 2.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5.25, 5.75, 0.5, 0.625, 0.75, 0.875, 1, 1.25, 1.75, 2.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5.25, 5.75, 0.5, 0.625, 0.75, 0.875, 1, 1.25, 1.75, 2.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5.25, 5.75, 0.5, 0.75, 1.5, 3, 3, 3, 6, 0.5, 0.75, 1.5, 3, 3, 3, 6, 0.5, 0.75, 1.5, 3, 3, 3, 6, 0.5, 0.75, 1.5, 3, 6, 3, 3, 6, 0.5, 0.75, 1, 1.5, 2, 2, 2.5, 3, 4, 5, 6, 0.5, 0.75, 1, 1.5, 2, 2, 2.5, 3, 4, 5, 6, 0.5, 0.75, 1, 1.5, 2, 2, 2.5, 3, 4, 5, 6, 0.5, 0.625, 0.75, 0.875, 1, 1.25, 2.25, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5.25, 5.75, 3, 3, 3, 3, 3, 3, 0.5, 0.75, 1, 1.5, 2, 2.5, 2, 2.5, 3, 4, 5, 6, 0.5, 0.75, 1, 1.5, 2, 2.5, 2, 2.5, 3, 4, 5, 6, 0.5, 0.75, 1, 1.5, 2, 2.5, 2, 2.5, 3, 4, 5, 6, 3, 0.5, 0.75, 1.5, 3, 6, 3, 6, 3, 3, 3, 1.75, 1.75, 0.5, 0.75, 1.75, 1.75, 2.75, 3.75, 1.75, 1.75, 0.5, 0.75, 2.75, 3.75, 1.75, 1.75, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= exp(-x[0]*px[i])/(x[1]+x[2]*px[i]);
		s += d * d;
	}

	return( s );
}

static void calcNistChwirut1_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.019028; maxv[ 0 ] = 0.36153;
	minv[ 1 ] = 0.00061314; maxv[ 1 ] = 0.01165;
	minv[ 2 ] = 0.0010531; maxv[ 2 ] = 0.020009;

	*optv = 2.3844771393e+003;
}

static const CTestFn TestFnNistChwirut1 = { "NistChwirut1", 3, 0.0, 0.0,
	0.0, &calcNistChwirut1, &calcNistChwirut1_p };

static double calcNistChwirut2( const double* const x, const int N )
{
	const int pn = 54;
	static const double py[] = {
		92.9, 57.1, 31.05, 11.5875, 8.025, 63.6, 21.4, 14.25, 8.475, 63.8, 26.8, 16.4625, 7.125, 67.3, 41, 21.15, 8.175, 81.5, 13.12, 59.9, 14.62, 32.9, 5.44, 12.56, 5.44, 32, 13.95, 75.8, 20, 10.42, 59.5, 21.67, 8.55, 62, 20.2, 7.76, 3.75, 11.81, 54.7, 23.7, 11.55, 61.3, 17.7, 8.74, 59.2, 16.3, 8.62, 81, 4.87, 14.62, 81.7, 17.17, 81.3, 28.9, };

	static const double px[] = {
		0.5, 1, 1.75, 3.75, 5.75, 0.875, 2.25, 3.25, 5.25, 0.75, 1.75, 2.75, 4.75, 0.625, 1.25, 2.25, 4.25, 0.5, 3, 0.75, 3, 1.5, 6, 3, 6, 1.5, 3, 0.5, 2, 4, 0.75, 2, 5, 0.75, 2.25, 3.75, 5.75, 3, 0.75, 2.5, 4, 0.75, 2.5, 4, 0.75, 2.5, 4, 0.5, 6, 3, 0.5, 2.75, 0.5, 1.75, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= exp(-x[0]*px[i])/(x[1]+x[2]*px[i]);
		s += d * d;
	}

	return( s );
}

static void calcNistChwirut2_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.016658; maxv[ 0 ] = 0.3165;
	minv[ 1 ] = 0.00051653; maxv[ 1 ] = 0.0098141;
	minv[ 2 ] = 0.001215; maxv[ 2 ] = 0.023085;

	*optv = 5.1304802941e+002;
}

static const CTestFn TestFnNistChwirut2 = { "NistChwirut2", 3, 0.0, 0.0,
	0.0, &calcNistChwirut2, &calcNistChwirut2_p };

static double calcNistDanWood( const double* const x, const int N )
{
	const int pn = 6;
	static const double py[] = {
		2.138, 3.421, 3.597, 4.34, 4.882, 5.66, };

	static const double px[] = {
		1.309, 1.471, 1.49, 1.565, 1.611, 1.68, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= pow(x[0]*px[i],x[1]);
		s += d * d;
	}

	return( s );
}

static void calcNistDanWood_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.076886; maxv[ 0 ] = 1.4608;
	minv[ 1 ] = 0.38604; maxv[ 1 ] = 7.3348;

	*optv = 4.3173084083e-003;
}

static const CTestFn TestFnNistDanWood = { "NistDanWood", 2, 0.0, 0.0,
	0.0, &calcNistDanWood, &calcNistDanWood_p };

static double calcNistENSO( const double* const x, const int N )
{
	const int pn = 168;
	static const double py[] = {
		12.9, 11.3, 10.6, 11.2, 10.9, 7.5, 7.7, 11.7, 12.9, 14.3, 10.9, 13.7, 17.1, 14, 15.3, 8.5, 5.7, 5.5, 7.6, 8.6, 7.3, 7.6, 12.7, 11, 12.7, 12.9, 13, 10.9, 10.4, 10.2, 8, 10.9, 13.6, 10.5, 9.2, 12.4, 12.7, 13.3, 10.1, 7.8, 4.8, 3, 2.5, 6.3, 9.7, 11.6, 8.6, 12.4, 10.5, 13.3, 10.4, 8.1, 3.7, 10.7, 5.1, 10.4, 10.9, 11.7, 11.4, 13.7, 14.1, 14, 12.5, 6.3, 9.6, 11.7, 5, 10.8, 12.7, 10.8, 11.8, 12.6, 15.7, 12.6, 14.8, 7.8, 7.1, 11.2, 8.1, 6.4, 5.2, 12, 10.2, 12.7, 10.2, 14.7, 12.2, 7.1, 5.7, 6.7, 3.9, 8.5, 8.3, 10.8, 16.7, 12.6, 12.5, 12.5, 9.8, 7.2, 4.1, 10.6, 10.1, 10.1, 11.9, 13.6, 16.3, 17.6, 15.5, 16, 15.2, 11.2, 14.3, 14.5, 8.5, 12, 12.7, 11.3, 14.5, 15.1, 10.4, 11.5, 13.4, 7.5, 0.6, 0.3, 5.5, 5, 4.6, 8.2, 9.9, 9.2, 12.5, 10.9, 9.9, 8.9, 7.6, 9.5, 8.4, 10.7, 13.6, 13.7, 13.7, 16.5, 16.8, 17.1, 15.4, 9.5, 6.1, 10.1, 9.3, 5.3, 11.2, 16.6, 15.6, 12, 11.5, 8.6, 13.8, 8.7, 8.6, 8.6, 8.7, 12.8, 13.2, 14, 13.4, 14.8, };

	static const double px[] = {
		1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]+x[1]*cos(2*M_PI*px[i]/12)+x[2]*sin(2*M_PI*px[i]/12)+
			x[4]*cos(2*M_PI*px[i]/x[3])+x[5]*sin(2*M_PI*px[i]/x[3])+
			x[7]*cos(2*M_PI*px[i]/x[6])+x[8]*sin(2*M_PI*px[i]/x[6]);

		s += d * d;
	}

	return( s );
}

static void calcNistENSO_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 1.0511; maxv[ 0 ] = 19.97;
	minv[ 1 ] = 0.30762; maxv[ 1 ] = 5.8448;
	minv[ 2 ] = 0.05328; maxv[ 2 ] = 1.0123;
	minv[ 3 ] = 4.4311; maxv[ 3 ] = 84.191;
	minv[ 4 ] = -3.084; maxv[ 4 ] = -0.16231;
	minv[ 5 ] = 0.052554; maxv[ 5 ] = 0.99854;
	minv[ 6 ] = 2.6888; maxv[ 6 ] = 51.086;
	minv[ 7 ] = 0.021232; maxv[ 7 ] = 0.40341;
	minv[ 8 ] = 0.14967; maxv[ 8 ] = 2.8437;

	*optv = 7.8853978668e+002;
}

static const CTestFn TestFnNistENSO = { "NistENSO", 9, 0.0, 0.0,
	0.0, &calcNistENSO, &calcNistENSO_p };

static double calcNistEckerle4( const double* const x, const int N )
{
	const int pn = 35;
	static const double py[] = {
		0.0001575, 0.0001699, 0.000235, 0.0003102, 0.0004917, 0.000871, 0.0017418, 0.00464, 0.0065895, 0.0097302, 0.0149002, 0.023731, 0.0401683, 0.0712559, 0.126446, 0.207341, 0.290237, 0.344562, 0.369805, 0.366853, 0.310673, 0.207815, 0.116435, 0.0616764, 0.03372, 0.0194023, 0.0117831, 0.0074357, 0.0022732, 0.00088, 0.0004579, 0.0002345, 0.0001586, 0.0001143, 7.1e-005, };

	static const double px[] = {
		400, 405, 410, 415, 420, 425, 430, 435, 436.5, 438, 439.5, 441, 442.5, 444, 445.5, 447, 448.5, 450, 451.5, 453, 454.5, 456, 457.5, 459, 460.5, 462, 463.5, 465, 470, 475, 480, 485, 490, 495, 500, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= (x[0]/x[1])*exp(-0.5*sqr((px[i]-x[2])/x[1]));
		s += d * d;
	}

	return( s );
}

static void calcNistEckerle4_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.15544; maxv[ 0 ] = 2.9533;
	minv[ 1 ] = 0.40888; maxv[ 1 ] = 7.7688;
	minv[ 2 ] = 45.154; maxv[ 2 ] = 857.93;

	*optv = 1.4635887487e-003;
}

static const CTestFn TestFnNistEckerle4 = { "NistEckerle4", 3, 0.0, 0.0,
	0.0, &calcNistEckerle4, &calcNistEckerle4_p };

static double calcNistGauss1( const double* const x, const int N )
{
	const int pn = 250;
	static const double py[] = {
		97.6223, 97.8072, 96.6225, 92.5902, 91.2387, 95.327, 90.3504, 89.4624, 91.7252, 89.8692, 86.8808, 85.9436, 87.6069, 86.2584, 80.7498, 83.0355, 88.2584, 82.0132, 82.741, 83.3003, 81.2785, 81.8551, 80.7519, 80.0957, 81.0763, 78.8154, 78.386, 79.9339, 79.4847, 79.9594, 76.1069, 78.3983, 81.4306, 82.4887, 81.6546, 80.8432, 88.6866, 84.7444, 86.8393, 85.9774, 91.2851, 97.2241, 93.5173, 94.1016, 101.918, 98.4313, 110.421, 107.663, 111.729, 116.512, 120.761, 123.955, 124.244, 130.8, 133.296, 130.779, 132.057, 138.658, 142.925, 142.721, 144.125, 147.438, 148.265, 152.052, 147.386, 149.207, 148.954, 144.588, 148.123, 148.014, 143.889, 140.909, 143.443, 139.394, 135.988, 136.393, 126.726, 124.449, 122.865, 113.856, 113.704, 106.841, 107.003, 102.463, 96.093, 94.5756, 86.9882, 84.9015, 81.1802, 76.4012, 67.092, 72.6715, 68.1085, 67.9909, 63.3409, 60.5525, 56.1869, 53.6448, 53.7031, 48.0789, 42.2126, 45.6518, 41.6973, 41.2495, 39.2135, 37.717, 36.684, 37.3039, 37.4328, 37.4501, 32.6465, 31.8435, 31.3995, 26.6891, 32.2532, 27.6101, 33.5865, 28.1071, 30.2643, 28.0165, 29.1102, 23.021, 25.6509, 28.5029, 25.237, 26.1383, 33.5326, 29.252, 27.0985, 26.53, 25.524, 26.6922, 24.5527, 27.7176, 25.203, 25.6148, 25.0689, 27.6393, 24.9485, 25.8681, 22.4818, 26.9004, 25.3992, 17.9061, 23.7604, 25.8969, 27.6423, 22.861, 26.47, 23.7289, 27.5433, 30.5268, 28.0726, 34.9282, 28.2919, 34.1916, 35.4121, 37.0934, 40.9833, 39.5392, 47.8012, 47.4631, 51.0417, 54.5806, 57.53, 61.4209, 62.7903, 68.5146, 70.2305, 74.4278, 76.5991, 81.6205, 83.4221, 79.1745, 88.5699, 85.6653, 86.555, 90.6591, 84.2729, 85.7222, 83.107, 82.1688, 80.4257, 78.1569, 79.7969, 77.8438, 74.5033, 71.5729, 65.8803, 65.0139, 60.1958, 59.6673, 52.9548, 53.8779, 44.9127, 41.0991, 41.6802, 34.5338, 34.8642, 33.1479, 29.5886, 27.2946, 21.9144, 19.0816, 24.9029, 19.8234, 16.7555, 18.2456, 17.2355, 16.3493, 13.7129, 14.7568, 13.9717, 12.4287, 14.3552, 7.70331, 10.2344, 11.7831, 13.8777, 4.5357, 10.0593, 8.42482, 10.5331, 9.60225, 7.87751, 6.25812, 8.89987, 7.87775, 12.5119, 10.6621, 6.0354, 6.79066, 8.78354, 4.60029, 8.40091, 7.21656, 10.0174, 7.33128, 6.52786, 2.842, 10.3251, 4.79099, 8.3771, 6.26445, 2.70621, 8.36233, 8.98366, 3.36257, 1.18275, 4.87536, };

	static const double px[] = {
		1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*exp(-x[1]*px[i])+x[2]*exp(-sqr(px[i]-x[3])/sqr(x[4]))+
			x[5]*exp(-sqr(px[i]-x[6])/sqr(x[7]));

		s += d * d;
	}

	return( s );
}

static void calcNistGauss1_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 9.8778; maxv[ 0 ] = 187.68;
	minv[ 1 ] = 0.0010497; maxv[ 1 ] = 0.019945;
	minv[ 2 ] = 10.049; maxv[ 2 ] = 190.93;
	minv[ 3 ] = 6.7481; maxv[ 3 ] = 128.21;
	minv[ 4 ] = 2.313; maxv[ 4 ] = 43.947;
	minv[ 5 ] = 7.1995; maxv[ 5 ] = 136.79;
	minv[ 6 ] = 17.9; maxv[ 6 ] = 340.1;
	minv[ 7 ] = 1.8389; maxv[ 7 ] = 34.94;

	*optv = 1.3158222432e+003;
}

static const CTestFn TestFnNistGauss1 = { "NistGauss1", 8, 0.0, 0.0,
	0.0, &calcNistGauss1, &calcNistGauss1_p };

static double calcNistGauss2( const double* const x, const int N )
{
	const int pn = 250;
	static const double py[] = {
		97.5878, 97.7634, 96.567, 92.5204, 91.151, 95.2173, 90.2135, 89.2923, 91.5148, 89.6097, 86.5619, 85.5532, 87.1305, 85.6794, 80.0485, 82.1893, 87.2408, 80.7941, 81.2857, 81.5694, 79.2271, 79.4327, 77.9019, 76.7547, 77.1738, 74.2735, 73.119, 73.8483, 72.4787, 71.9229, 66.9218, 67.9384, 69.5621, 69.0707, 66.5398, 63.8788, 69.7154, 63.6059, 63.3715, 60.0183, 62.6748, 65.8067, 59.143, 56.6295, 61.2178, 54.3879, 62.9344, 56.6514, 57.1336, 58.2969, 58.9174, 58.5017, 55.2289, 58.3038, 57.4324, 51.6941, 49.9313, 53.7076, 55.3971, 52.8971, 52.3165, 53.9872, 53.5416, 56.4505, 51.3228, 53.1168, 53.2863, 49.8055, 54.6956, 56.4163, 54.5936, 54.3852, 60.1535, 59.7877, 60.4999, 65.4389, 60.7, 63.7186, 67.7714, 64.7093, 70.7819, 70.3865, 77.2236, 79.5267, 80.1308, 85.6782, 85.2065, 90.2455, 93.6195, 95.8651, 93.4699, 105.814, 107.827, 114.061, 115.502, 118.511, 119.618, 122.194, 126.99, 125.701, 123.745, 130.654, 129.717, 131.824, 131.876, 131.999, 132.122, 133.441, 133.825, 133.67, 128.285, 126.518, 124.755, 118.402, 122.033, 115.206, 118.786, 110.739, 110.2, 105.173, 103.447, 94.5428, 94.4053, 94.5796, 88.7661, 87.2875, 92.5044, 86.28, 82.4431, 80.4737, 78.3661, 78.7431, 76.1279, 79.1311, 76.7606, 77.6077, 77.7663, 81.2822, 79.7431, 81.9796, 80.0295, 85.9523, 85.9684, 79.9479, 87.1702, 90.5099, 93.2337, 89.148, 93.1149, 90.3434, 93.6942, 95.7426, 91.8511, 96.745, 87.61, 90.4701, 88.1169, 85.7067, 85.0136, 78.5304, 81.3415, 75.1929, 72.6612, 69.855, 66.2948, 63.585, 58.3385, 57.5077, 52.805, 50.7932, 47.0349, 46.4709, 43.0902, 34.1153, 39.2824, 32.6839, 30.4406, 31.9893, 23.6333, 23.6964, 20.2681, 19.0707, 17.5954, 16.0879, 18.9427, 18.6135, 17.258, 16.6229, 13.4837, 15.3765, 13.4721, 15.9619, 12.3255, 16.3388, 10.4383, 9.62871, 13.1227, 8.77242, 11.7614, 12.5502, 11.3311, 11.2049, 7.81692, 6.80068, 14.2658, 10.6629, 8.91157, 11.5673, 11.5821, 11.5907, 9.73013, 11.4424, 11.2291, 10.1721, 12.5091, 6.20149, 9.01961, 10.8061, 13.0963, 3.91427, 9.56789, 8.03845, 10.231, 9.36741, 7.69597, 6.11857, 8.79321, 7.79669, 12.4507, 10.616, 6.001, 6.7651, 8.76465, 4.58642, 8.39078, 7.2092, 10.0121, 7.32746, 6.52514, 2.84007, 10.3237, 4.79003, 8.37643, 6.26398, 2.70589, 8.36211, 8.98351, 3.36247, 1.18268, 4.87531, };

	static const double px[] = {
		1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*exp(-x[1]*px[i])+x[2]*exp(-sqr(px[i]-x[3])/sqr(x[4]))+
			x[5]*exp(-sqr(px[i]-x[6])/sqr(x[7]));

		s += d * d;
	}

	return( s );
}

static void calcNistGauss2_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 9.9018; maxv[ 0 ] = 188.13;
	minv[ 1 ] = 0.0010995; maxv[ 1 ] = 0.02089;
	minv[ 2 ] = 10.188; maxv[ 2 ] = 193.57;
	minv[ 3 ] = 10.703; maxv[ 3 ] = 203.36;
	minv[ 4 ] = 2.3579; maxv[ 4 ] = 44.799;
	minv[ 5 ] = 7.2046; maxv[ 5 ] = 136.89;
	minv[ 6 ] = 15.327; maxv[ 6 ] = 291.21;
	minv[ 7 ] = 1.9526; maxv[ 7 ] = 37.099;

	*optv = 1.2475282092e+003;
}

static const CTestFn TestFnNistGauss2 = { "NistGauss2", 8, 0.0, 0.0,
	0.0, &calcNistGauss2, &calcNistGauss2_p };

static double calcNistGauss3( const double* const x, const int N )
{
	const int pn = 250;
	static const double py[] = {
		97.5878, 97.7634, 96.567, 92.5204, 91.151, 95.2173, 90.2135, 89.2923, 91.5148, 89.6097, 86.5619, 85.5532, 87.1305, 85.6794, 80.0485, 82.1892, 87.2408, 80.794, 81.2856, 81.5693, 79.227, 79.4326, 77.9017, 76.7544, 77.1734, 74.273, 73.1183, 73.8473, 72.4775, 71.9213, 66.9196, 67.9355, 69.5584, 69.0659, 66.5337, 63.8709, 69.7053, 63.593, 63.3551, 59.9975, 62.6484, 65.7734, 59.1014, 56.5775, 61.1531, 54.3077, 62.8353, 56.5296, 56.9843, 58.1146, 58.6958, 58.2332, 54.9049, 57.9144, 56.9663, 51.1383, 49.2712, 52.9267, 54.4769, 51.8171, 51.054, 52.5173, 51.8371, 54.482, 49.0586, 50.5232, 50.3276, 46.4442, 50.8928, 52.132, 49.7874, 49.0164, 54.182, 53.1746, 53.2083, 57.4346, 51.9528, 54.2028, 57.4669, 53.6027, 58.8673, 57.6665, 63.7103, 65.2424, 65.1088, 69.9631, 68.8547, 73.3257, 76.2124, 78.0631, 75.377, 87.5445, 89.5059, 95.821, 97.4839, 100.861, 102.485, 105.731, 111.349, 111.031, 110.192, 118.358, 118.809, 122.425, 124.095, 125.934, 127.853, 131.036, 133.334, 135.128, 131.711, 131.915, 132.111, 127.69, 133.215, 128.23, 133.59, 127.254, 128.348, 124.869, 124.603, 117.065, 118.197, 119.541, 114.795, 114.278, 120.348, 114.865, 111.651, 110.183, 108.446, 109.057, 106.531, 109.469, 106.871, 107.319, 106.9, 109.653, 107.16, 108.251, 104.963, 109.36, 107.67, 99.7729, 104.964, 106.138, 106.582, 100.129, 101.669, 96.4425, 97.3417, 96.9741, 90.7346, 93.3795, 82.1233, 83.0166, 78.8736, 74.8697, 72.7934, 65.1474, 67.0213, 60.1614, 57.14, 54.0577, 50.4226, 47.8243, 42.8575, 42.4549, 38.3081, 36.9579, 33.9454, 34.1902, 31.661, 23.5617, 29.6114, 23.8877, 22.4981, 24.869, 17.2948, 18.0929, 15.3481, 14.78, 13.8783, 12.8889, 16.2076, 16.2902, 15.2971, 14.9784, 12.1133, 14.2417, 12.5382, 15.1982, 11.7048, 15.8375, 10.0359, 9.30757, 12.868, 8.57167, 11.6042, 12.4277, 11.2363, 11.132, 7.76112, 6.75825, 14.2338, 10.6388, 8.89358, 11.554, 11.5722, 11.5835, 9.72486, 11.4385, 11.2264, 10.1702, 12.5077, 6.20049, 9.0189, 10.8056, 13.0959, 3.91403, 9.56772, 8.03834, 10.231, 9.36736, 7.69594, 6.11855, 8.79319, 7.79668, 12.4506, 10.616, 6.001, 6.7651, 8.76465, 4.58642, 8.39078, 7.2092, 10.0121, 7.32746, 6.52514, 2.84007, 10.3237, 4.79003, 8.37643, 6.26398, 2.70589, 8.36211, 8.98351, 3.36247, 1.18268, 4.87531, };

	static const double px[] = {
		1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*exp(-x[1]*px[i])+x[2]*exp(-sqr(px[i]-x[3])/sqr(x[4]))+
			x[5]*exp(-sqr(px[i]-x[6])/sqr(x[7]));

		s += d * d;
	}

	return( s );
}

static void calcNistGauss3_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 9.894; maxv[ 0 ] = 187.99;
	minv[ 1 ] = 0.0010946; maxv[ 1 ] = 0.020797;
	minv[ 2 ] = 10.07; maxv[ 2 ] = 191.32;
	minv[ 3 ] = 11.164; maxv[ 3 ] = 212.11;
	minv[ 4 ] = 2.3301; maxv[ 4 ] = 44.271;
	minv[ 5 ] = 7.3705; maxv[ 5 ] = 140.04;
	minv[ 6 ] = 14.776; maxv[ 6 ] = 280.75;
	minv[ 7 ] = 1.9668; maxv[ 7 ] = 37.37;

	*optv = 1.2444846360e+003;
}

static const CTestFn TestFnNistGauss3 = { "NistGauss3", 8, 0.0, 0.0,
	0.0, &calcNistGauss3, &calcNistGauss3_p };

static double calcNistHahn1( const double* const x, const int N )
{
	const int pn = 236;
	static const double py[] = {
		0.591, 1.547, 2.902, 2.894, 4.703, 6.307, 7.03, 7.898, 9.47, 9.484, 10.072, 10.163, 11.615, 12.005, 12.478, 12.982, 12.97, 13.926, 14.452, 14.404, 15.19, 15.55, 15.528, 15.499, 16.131, 16.438, 16.387, 16.549, 16.872, 16.83, 16.926, 16.907, 16.966, 17.06, 17.122, 17.311, 17.355, 17.668, 17.767, 17.803, 17.765, 17.768, 17.736, 17.858, 17.877, 17.912, 18.046, 18.085, 18.291, 18.357, 18.426, 18.584, 18.61, 18.87, 18.795, 19.111, 0.367, 0.796, 0.892, 1.903, 2.15, 3.697, 5.87, 6.421, 7.422, 9.944, 11.023, 11.87, 12.786, 14.067, 13.974, 14.462, 14.464, 15.381, 15.483, 15.59, 16.075, 16.347, 16.181, 16.915, 17.003, 16.978, 17.756, 17.808, 17.868, 18.481, 18.486, 19.09, 16.062, 16.337, 16.345, 16.388, 17.159, 17.116, 17.164, 17.123, 17.979, 17.974, 18.007, 17.993, 18.523, 18.669, 18.617, 19.371, 19.33, 0.08, 0.248, 1.089, 1.418, 2.278, 3.624, 4.574, 5.556, 7.267, 7.695, 9.136, 9.959, 9.957, 11.6, 13.138, 13.564, 13.871, 13.994, 14.947, 15.473, 15.379, 15.455, 15.908, 16.114, 17.071, 17.135, 17.282, 17.368, 17.483, 17.764, 18.185, 18.271, 18.236, 18.237, 18.523, 18.627, 18.665, 19.086, 0.214, 0.943, 1.429, 2.241, 2.951, 3.782, 4.757, 5.602, 7.169, 8.92, 10.055, 12.035, 12.861, 13.436, 14.167, 14.755, 15.168, 15.651, 15.746, 16.216, 16.445, 16.965, 17.121, 17.206, 17.25, 17.339, 17.793, 18.123, 18.49, 18.566, 18.645, 18.706, 18.924, 19.1, 0.375, 0.471, 1.504, 2.204, 2.813, 4.765, 9.835, 10.04, 11.946, 12.596, 13.303, 13.922, 14.44, 14.951, 15.627, 15.639, 15.814, 16.315, 16.334, 16.43, 16.423, 17.024, 17.009, 17.165, 17.134, 17.349, 17.576, 17.848, 18.09, 18.276, 18.404, 18.519, 19.133, 19.074, 19.239, 19.28, 19.101, 19.398, 19.252, 19.89, 20.007, 19.929, 19.268, 19.324, 20.049, 20.107, 20.062, 20.065, 19.286, 19.972, 20.088, 20.743, 20.83, 20.935, 21.035, 20.93, 21.074, 21.085, 20.935, };

	static const double px[] = {
		24.41, 34.82, 44.09, 45.07, 54.98, 65.51, 70.53, 75.7, 89.57, 91.14, 96.4, 97.19, 114.26, 120.25, 127.08, 133.55, 133.61, 158.67, 172.74, 171.31, 202.14, 220.55, 221.05, 221.39, 250.99, 268.99, 271.8, 271.97, 321.31, 321.69, 330.14, 333.03, 333.47, 340.77, 345.65, 373.11, 373.79, 411.82, 419.51, 421.59, 422.02, 422.47, 422.61, 441.75, 447.41, 448.7, 472.89, 476.69, 522.47, 522.62, 524.43, 546.75, 549.53, 575.29, 576, 625.55, 20.15, 28.78, 29.57, 37.41, 39.12, 50.24, 61.38, 66.25, 73.42, 95.52, 107.32, 122.04, 134.03, 163.19, 163.48, 175.7, 179.86, 211.27, 217.78, 219.14, 262.52, 268.01, 268.62, 336.25, 337.23, 339.33, 427.38, 428.58, 432.68, 528.99, 531.08, 628.34, 253.24, 273.13, 273.66, 282.1, 346.62, 347.19, 348.78, 351.18, 450.1, 450.35, 451.92, 455.56, 552.22, 553.56, 555.74, 652.59, 656.2, 14.13, 20.41, 31.3, 33.84, 39.7, 48.83, 54.5, 60.41, 72.77, 75.25, 86.84, 94.88, 96.4, 117.37, 139.08, 147.73, 158.63, 161.84, 192.11, 206.76, 209.07, 213.32, 226.44, 237.12, 330.9, 358.72, 370.77, 372.72, 396.24, 416.59, 484.02, 495.47, 514.78, 515.65, 519.47, 544.47, 560.11, 620.77, 18.97, 28.93, 33.91, 40.03, 44.66, 49.87, 55.16, 60.9, 72.08, 85.15, 97.06, 119.63, 133.27, 143.84, 161.91, 180.67, 198.44, 226.86, 229.65, 258.27, 273.77, 339.15, 350.13, 362.75, 371.03, 393.32, 448.53, 473.78, 511.12, 524.7, 548.75, 551.64, 574.02, 623.86, 21.46, 24.33, 33.43, 39.22, 44.18, 55.02, 94.33, 96.44, 118.82, 128.48, 141.94, 156.92, 171.65, 190, 223.26, 223.88, 231.5, 265.05, 269.44, 271.78, 273.46, 334.61, 339.79, 349.52, 358.18, 377.98, 394.77, 429.66, 468.22, 487.27, 519.54, 523.03, 612.99, 638.59, 641.36, 622.05, 631.5, 663.97, 646.9, 748.29, 749.21, 750.14, 647.04, 646.89, 746.9, 748.43, 747.35, 749.27, 647.61, 747.78, 750.51, 851.37, 845.97, 847.54, 849.93, 851.61, 849.75, 850.98, 848.23, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= (x[0]+x[1]*px[i]+x[2]*sqr(px[i])+x[3]*pow(px[i],3.0))/
			(1+x[4]*px[i]+x[5]*sqr(px[i])+x[6]*pow(px[i],3.0));

		s += d * d;
	}

	return( s );
}

static void calcNistHahn1_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.10776; maxv[ 0 ] = 2.0475;
	minv[ 1 ] = -0.23312; maxv[ 1 ] = -0.012269;
	minv[ 2 ] = 0.00040864; maxv[ 2 ] = 0.0077641;
	minv[ 3 ] = -2.7099e-006; maxv[ 3 ] = -1.4263e-007;
	minv[ 4 ] = -0.010946; maxv[ 4 ] = -0.0005761;
	minv[ 5 ] = 2.4054e-005; maxv[ 5 ] = 0.00045702;
	minv[ 6 ] = -2.3397e-007; maxv[ 6 ] = -1.2314e-008;

	*optv = 1.5324382854e+000;
}

static const CTestFn TestFnNistHahn1 = { "NistHahn1", 7, 0.0, 0.0,
	0.0, &calcNistHahn1, &calcNistHahn1_p };

static double calcNistKirby2( const double* const x, const int N )
{
	const int pn = 151;
	static const double py[] = {
		0.0082, 0.0112, 0.0149, 0.0198, 0.0248, 0.0324, 0.042, 0.0549, 0.0719, 0.0963, 0.1291, 0.171, 0.2314, 0.3227, 0.4809, 0.7084, 1.022, 1.458, 1.952, 2.541, 3.223, 3.999, 4.852, 5.732, 6.727, 7.835, 9.025, 10.267, 11.578, 12.944, 14.377, 15.856, 17.331, 18.885, 20.575, 22.32, 22.303, 23.46, 24.06, 25.272, 25.853, 27.11, 27.658, 28.924, 29.511, 30.71, 31.35, 32.52, 33.23, 34.33, 35.06, 36.17, 36.84, 38.01, 38.67, 39.87, 40.03, 40.5, 41.37, 41.67, 42.31, 42.73, 43.46, 44.14, 44.55, 45.22, 45.92, 46.3, 47, 47.68, 48.06, 48.74, 49.41, 49.76, 50.43, 51.11, 51.5, 52.12, 52.76, 53.18, 53.78, 54.46, 54.83, 55.4, 56.43, 57.03, 58, 58.61, 59.58, 60.11, 61.1, 61.65, 62.59, 63.12, 64.03, 64.62, 65.49, 66.03, 66.89, 67.42, 68.23, 68.77, 69.59, 70.11, 70.86, 71.43, 72.16, 72.7, 73.4, 73.93, 74.6, 75.16, 75.82, 76.34, 76.98, 77.48, 78.08, 78.6, 79.17, 79.62, 79.88, 80.19, 80.66, 81.22, 81.66, 82.16, 82.59, 83.14, 83.5, 84, 84.4, 84.89, 85.26, 85.74, 86.07, 86.54, 86.89, 87.32, 87.65, 88.1, 88.43, 88.83, 89.12, 89.54, 89.85, 90.25, 90.55, 90.93, 91.2, 91.55, 92.2, };

	static const double px[] = {
		9.65, 10.74, 11.81, 12.88, 14.06, 15.28, 16.63, 18.19, 19.88, 21.84, 24, 26.25, 28.86, 31.85, 35.79, 40.18, 44.74, 49.53, 53.94, 58.29, 62.63, 67.03, 71.25, 75.22, 79.33, 83.56, 87.75, 91.93, 96.1, 100.28, 104.46, 108.66, 112.71, 116.88, 121.33, 125.79, 125.79, 128.74, 130.27, 133.33, 134.79, 137.93, 139.33, 142.46, 143.9, 146.91, 148.51, 151.41, 153.17, 155.97, 157.76, 160.56, 162.3, 165.21, 166.9, 169.92, 170.32, 171.54, 173.79, 174.57, 176.25, 177.34, 179.19, 181.02, 182.08, 183.88, 185.75, 186.8, 188.63, 190.45, 191.48, 193.35, 195.22, 196.23, 198.05, 199.97, 201.06, 202.83, 204.69, 205.86, 207.58, 209.5, 210.65, 212.33, 215.43, 217.16, 220.21, 221.98, 225.06, 226.79, 229.92, 231.69, 234.77, 236.6, 239.63, 241.5, 244.48, 246.4, 249.35, 251.32, 254.22, 256.24, 259.11, 261.18, 264.02, 266.13, 268.94, 271.09, 273.87, 276.08, 278.83, 281.08, 283.81, 286.11, 288.81, 291.08, 293.75, 295.99, 298.64, 300.84, 302.02, 303.48, 305.65, 308.27, 310.41, 313.01, 315.12, 317.71, 319.79, 322.36, 324.42, 326.98, 329.01, 331.56, 333.56, 336.1, 338.08, 340.6, 342.57, 345.08, 347.02, 349.52, 351.44, 353.93, 355.83, 358.32, 360.2, 362.67, 364.53, 367, 371.3, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= (x[0]+x[1]*px[i]+x[2]*sqr(px[i]))/
			(1+x[3]*px[i]+x[4]*sqr(px[i]));

		s += d * d;
	}

	return( s );
}

static void calcNistKirby2_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.16745; maxv[ 0 ] = 3.1816;
	minv[ 1 ] = -0.26462; maxv[ 1 ] = -0.013927;
	minv[ 2 ] = 0.00025961; maxv[ 2 ] = 0.0049326;
	minv[ 3 ] = -0.0032759; maxv[ 3 ] = -0.00017242;
	minv[ 4 ] = 2.1665e-006; maxv[ 4 ] = 4.1163e-005;

	*optv = 3.9050739624e+000;
}

static const CTestFn TestFnNistKirby2 = { "NistKirby2", 5, 0.0, 0.0,
	0.0, &calcNistKirby2, &calcNistKirby2_p };

static double calcNistLanczos1( const double* const x, const int N )
{
	const int pn = 24;
	static const double py[] = {
		2.5134, 2.04433, 1.6684, 1.36642, 1.12323, 0.92689, 0.767934, 0.638878, 0.533784, 0.447936, 0.377585, 0.319739, 0.272013, 0.232497, 0.199659, 0.17227, 0.149341, 0.13007, 0.113812, 0.100042, 0.0883321, 0.0783354, 0.0697669, 0.0623931, };

	static const double px[] = {
		0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*exp(-x[1]*px[i])+x[2]*exp(-x[3]*px[i])+
			x[4]*exp(-x[5]*px[i]);

		s += d * d;
	}

	return( s );
}

static void calcNistLanczos1_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.00951; maxv[ 0 ] = 0.18069;
	minv[ 1 ] = 0.1; maxv[ 1 ] = 1.9;
	minv[ 2 ] = 0.08607; maxv[ 2 ] = 1.6353;
	minv[ 3 ] = 0.3; maxv[ 3 ] = 5.7;
	minv[ 4 ] = 0.15576; maxv[ 4 ] = 2.9594;
	minv[ 5 ] = 0.5; maxv[ 5 ] = 9.5;

	*optv = 1.4307867721e-025;
}

static const CTestFn TestFnNistLanczos1 = { "NistLanczos1", 6, 0.0, 0.0,
	0.0, &calcNistLanczos1, &calcNistLanczos1_p };

static double calcNistLanczos2( const double* const x, const int N )
{
	const int pn = 24;
	static const double py[] = {
		2.5134, 2.04433, 1.6684, 1.36642, 1.12323, 0.92689, 0.767934, 0.638878, 0.533784, 0.447936, 0.377585, 0.319739, 0.272013, 0.232497, 0.199659, 0.17227, 0.149341, 0.13007, 0.113812, 0.100042, 0.0883321, 0.0783354, 0.0697669, 0.0623931, };

	static const double px[] = {
		0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*exp(-x[1]*px[i])+x[2]*exp(-x[3]*px[i])+
			x[4]*exp(-x[5]*px[i]);

		s += d * d;
	}

	return( s );
}

static void calcNistLanczos2_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.0096251; maxv[ 0 ] = 0.18288;
	minv[ 1 ] = 0.10057; maxv[ 1 ] = 1.9109;
	minv[ 2 ] = 0.086425; maxv[ 2 ] = 1.6421;
	minv[ 3 ] = 0.30078; maxv[ 3 ] = 5.7149;
	minv[ 4 ] = 0.15529; maxv[ 4 ] = 2.9505;
	minv[ 5 ] = 0.50029; maxv[ 5 ] = 9.5055;

	*optv = 2.2299428125e-011;
}

static const CTestFn TestFnNistLanczos2 = { "NistLanczos2", 6, 0.0, 0.0,
	0.0, &calcNistLanczos2, &calcNistLanczos2_p };

static double calcNistLanczos3( const double* const x, const int N )
{
	const int pn = 24;
	static const double py[] = {
		2.5134, 2.0443, 1.6684, 1.3664, 1.1232, 0.9269, 0.7679, 0.6389, 0.5338, 0.4479, 0.3776, 0.3197, 0.272, 0.2325, 0.1997, 0.1723, 0.1493, 0.1301, 0.1138, 0.1, 0.0883, 0.0783, 0.0698, 0.0624, };

	static const double px[] = {
		0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*exp(-x[1]*px[i])+x[2]*exp(-x[3]*px[i])+
			x[4]*exp(-x[5]*px[i]);

		s += d * d;
	}

	return( s );
}

static void calcNistLanczos3_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.0086816; maxv[ 0 ] = 0.16495;
	minv[ 1 ] = 0.095498; maxv[ 1 ] = 1.8145;
	minv[ 2 ] = 0.084401; maxv[ 2 ] = 1.6036;
	minv[ 3 ] = 0.29516; maxv[ 3 ] = 5.608;
	minv[ 4 ] = 0.15826; maxv[ 4 ] = 3.0069;
	minv[ 5 ] = 0.49864; maxv[ 5 ] = 9.4741;

	*optv = 1.6117193594e-008;
}

static const CTestFn TestFnNistLanczos3 = { "NistLanczos3", 6, 0.0, 0.0,
	0.0, &calcNistLanczos3, &calcNistLanczos3_p };

static double calcNistMGH09( const double* const x, const int N )
{
	const int pn = 11;
	static const double py[] = {
		0.1957, 0.1947, 0.1735, 0.16, 0.0844, 0.0627, 0.0456, 0.0342, 0.0323, 0.0235, 0.0246, };

	static const double px[] = {
		4, 2, 1, 0.5, 0.25, 0.167, 0.125, 0.1, 0.0833, 0.0714, 0.0625, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*(sqr(px[i])+px[i]*x[1])/(sqr(px[i])+px[i]*x[2]+x[3]);
		s += d * d;
	}

	return( s );
}

static void calcNistMGH09_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.019281; maxv[ 0 ] = 0.36633;
	minv[ 1 ] = 0.019128; maxv[ 1 ] = 0.36344;
	minv[ 2 ] = 0.012306; maxv[ 2 ] = 0.23381;
	minv[ 3 ] = 0.013606; maxv[ 3 ] = 0.25852;

	*optv = 3.0750560385e-004;
}

static const CTestFn TestFnNistMGH09 = { "NistMGH09", 4, 0.0, 0.0,
	0.0, &calcNistMGH09, &calcNistMGH09_p };

static double calcNistMGH10( const double* const x, const int N )
{
	const int pn = 16;
	static const double py[] = {
		34780, 28610, 23650, 19630, 16370, 13720, 11540, 9744, 8261, 7030, 6005, 5147, 4427, 3820, 3307, 2872, };

	static const double px[] = {
		50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*exp(x[1]/(px[i]+x[2]));
		s += d * d;
	}

	return( s );
}

static void calcNistMGH10_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.00056096; maxv[ 0 ] = 0.010658;
	minv[ 1 ] = 618.13; maxv[ 1 ] = 11745;
	minv[ 2 ] = 34.522; maxv[ 2 ] = 655.92;

	*optv = 8.7945855171e+001;
}

static const CTestFn TestFnNistMGH10 = { "NistMGH10", 3, 0.0, 0.0,
	0.0, &calcNistMGH10, &calcNistMGH10_p };

static double calcNistMGH17( const double* const x, const int N )
{
	const int pn = 33;
	static const double py[] = {
		0.844, 0.908, 0.932, 0.936, 0.925, 0.908, 0.881, 0.85, 0.818, 0.784, 0.751, 0.718, 0.685, 0.658, 0.628, 0.603, 0.58, 0.558, 0.538, 0.522, 0.506, 0.49, 0.478, 0.467, 0.457, 0.448, 0.438, 0.431, 0.424, 0.42, 0.414, 0.411, 0.406, };

	static const double px[] = {
		0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]+x[1]*exp(-px[i]*x[3])+x[2]*exp(-px[i]*x[4]);
		s += d * d;
	}

	return( s );
}

static void calcNistMGH17_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.037541; maxv[ 0 ] = 0.71328;
	minv[ 1 ] = 0.19358; maxv[ 1 ] = 3.6781;
	minv[ 2 ] = -2.7829; maxv[ 2 ] = -0.14647;
	minv[ 3 ] = 0.0012868; maxv[ 3 ] = 0.024448;
	minv[ 4 ] = 0.0022123; maxv[ 4 ] = 0.042033;

	*optv = 5.4648946975e-005;
}

static const CTestFn TestFnNistMGH17 = { "NistMGH17", 5, 0.0, 0.0,
	0.0, &calcNistMGH17, &calcNistMGH17_p };

static double calcNistMisra1a( const double* const x, const int N )
{
	const int pn = 14;
	static const double py[] = {
		10.07, 14.73, 17.94, 23.93, 29.61, 35.18, 40.02, 44.82, 50.76, 55.05, 61.01, 66.4, 75.47, 81.78, };

	static const double px[] = {
		77.6, 114.9, 141.1, 190.8, 239.9, 289, 332.8, 378.4, 434.8, 477.3, 536.8, 593.1, 689.1, 760, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*(1-exp(-x[1]*px[i]));
		s += d * d;
	}

	return( s );
}

static void calcNistMisra1a_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 23.894; maxv[ 0 ] = 453.99;
	minv[ 1 ] = 5.5016e-005; maxv[ 1 ] = 0.0010453;

	*optv = 1.2455138894e-001;
}

static const CTestFn TestFnNistMisra1a = { "NistMisra1a", 2, 0.0, 0.0,
	0.0, &calcNistMisra1a, &calcNistMisra1a_p };

static double calcNistMisra1b( const double* const x, const int N )
{
	const int pn = 14;
	static const double py[] = {
		10.07, 14.73, 17.94, 23.93, 29.61, 35.18, 40.02, 44.82, 50.76, 55.05, 61.01, 66.4, 75.47, 81.78, };

	static const double px[] = {
		77.6, 114.9, 141.1, 190.8, 239.9, 289, 332.8, 378.4, 434.8, 477.3, 536.8, 593.1, 689.1, 760, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*(1-1.0/sqr(1+x[1]*px[i]/2));
		s += d * d;
	}

	return( s );
}

static void calcNistMisra1b_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 33.8; maxv[ 0 ] = 642.2;
	minv[ 1 ] = 3.9039e-005; maxv[ 1 ] = 0.00074174;

	*optv = 7.5464681533e-002;
}

static const CTestFn TestFnNistMisra1b = { "NistMisra1b", 2, 0.0, 0.0,
	0.0, &calcNistMisra1b, &calcNistMisra1b_p };

static double calcNistMisra1c( const double* const x, const int N )
{
	const int pn = 14;
	static const double py[] = {
		10.07, 14.73, 17.94, 23.93, 29.61, 35.18, 40.02, 44.82, 50.76, 55.05, 61.01, 66.4, 75.47, 81.78, };

	static const double px[] = {
		77.6, 114.9, 141.1, 190.8, 239.9, 289, 332.8, 378.4, 434.8, 477.3, 536.8, 593.1, 689.1, 760, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*(1-1.0/sqrt(1+2*x[1]*px[i]));
		s += d * d;
	}

	return( s );
}

static void calcNistMisra1c_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 63.643; maxv[ 0 ] = 1209.2;
	minv[ 1 ] = 2.0814e-005; maxv[ 1 ] = 0.00039546;

	*optv = 4.0966836971e-002;
}

static const CTestFn TestFnNistMisra1c = { "NistMisra1c", 2, 0.0, 0.0,
	0.0, &calcNistMisra1c, &calcNistMisra1c_p };

static double calcNistMisra1d( const double* const x, const int N )
{
	const int pn = 14;
	static const double py[] = {
		10.07, 14.73, 17.94, 23.93, 29.61, 35.18, 40.02, 44.82, 50.76, 55.05, 61.01, 66.4, 75.47, 81.78, };

	static const double px[] = {
		77.6, 114.9, 141.1, 190.8, 239.9, 289, 332.8, 378.4, 434.8, 477.3, 536.8, 593.1, 689.1, 760, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]*x[1]*px[i]/(1+x[1]*px[i]);
		s += d * d;
	}

	return( s );
}

static void calcNistMisra1d_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 43.737; maxv[ 0 ] = 831;
	minv[ 1 ] = 3.0227e-005; maxv[ 1 ] = 0.00057432;

	*optv = 5.6419295283e-002;
}

static const CTestFn TestFnNistMisra1d = { "NistMisra1d", 2, 0.0, 0.0,
	0.0, &calcNistMisra1d, &calcNistMisra1d_p };

static double calcNistNelson( const double* const x, const int N )
{
	const int pn = 128;
	static const double py[] = {
		15, 17, 15.5, 16.5, 15.5, 15, 16, 14.5, 15, 14.5, 12.5, 11, 14, 13, 14, 11.5, 14, 16, 13, 13.5, 13, 13.5, 12.5, 12.5, 12.5, 12, 11.5, 12, 13, 11.5, 13, 12.5, 13.5, 17.5, 17.5, 13.5, 12.5, 12.5, 15, 13, 12, 13, 12, 13.5, 10, 11.5, 11, 9.5, 15, 15, 15.5, 16, 13, 10.5, 13.5, 14, 12.5, 12, 11.5, 11.5, 6.5, 5.5, 6, 6, 18.5, 17, 15.3, 16, 13, 14, 12.5, 11, 12, 12, 11.5, 12, 6, 6, 5, 5.5, 12.5, 13, 16, 12, 11, 9.5, 11, 11, 11, 10, 10.5, 10.5, 2.7, 2.7, 2.5, 2.4, 13, 13.5, 16.5, 13.6, 11.5, 10.5, 13.5, 12, 7, 6.9, 8.8, 7.9, 1.2, 1.5, 1, 1.5, 13, 12.5, 16.5, 16, 11, 11.5, 10.5, 10, 7.27, 7.5, 6.7, 7.6, 1.5, 1, 1.2, 1.2, };

	static const double px1[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, };

	static const double px2[] = {
		180, 180, 180, 180, 225, 225, 225, 225, 250, 250, 250, 250, 275, 275, 275, 275, 180, 180, 180, 180, 225, 225, 225, 225, 250, 250, 250, 250, 275, 275, 275, 275, 180, 180, 180, 180, 225, 225, 225, 225, 250, 250, 250, 250, 275, 275, 275, 275, 180, 180, 180, 180, 225, 225, 225, 225, 250, 250, 250, 250, 275, 275, 275, 275, 180, 180, 180, 180, 225, 225, 225, 225, 250, 250, 250, 250, 275, 275, 275, 275, 180, 180, 180, 180, 225, 225, 225, 225, 250, 250, 250, 250, 275, 275, 275, 275, 180, 180, 180, 180, 225, 225, 225, 225, 250, 250, 250, 250, 275, 275, 275, 275, 180, 180, 180, 180, 225, 225, 225, 225, 250, 250, 250, 250, 275, 275, 275, 275, };


	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = log(py[ i ]);
		d -= x[0]-x[1]*px1[i]*exp(-x[2]*px2[i]);
		s += d * d;
	}

	return( s );
}

static void calcNistNelson_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.25907; maxv[ 0 ] = 4.9223;
	minv[ 1 ] = 5.6178e-010; maxv[ 1 ] = 1.0674e-008;
	minv[ 2 ] = -0.10963; maxv[ 2 ] = -0.0057701;

	*optv = 3.7976833176e+000;
}

static const CTestFn TestFnNistNelson = { "NistNelson", 3, 0.0, 0.0,
	0.0, &calcNistNelson, &calcNistNelson_p };

static double calcNistRat42( const double* const x, const int N )
{
	const int pn = 9;
	static const double py[] = {
		8.93, 10.8, 18.59, 22.33, 39.35, 56.11, 61.73, 64.62, 67.08, };

	static const double px[] = {
		9, 14, 21, 28, 42, 57, 63, 70, 79, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]/(1+exp(x[1]-x[2]*px[i]));
		s += d * d;
	}

	return( s );
}

static void calcNistRat42_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 7.2462; maxv[ 0 ] = 137.68;
	minv[ 1 ] = 0.26181; maxv[ 1 ] = 4.9743;
	minv[ 2 ] = 0.0067359; maxv[ 2 ] = 0.12798;

	*optv = 8.0565229338e+000;
}

static const CTestFn TestFnNistRat42 = { "NistRat42", 3, 0.0, 0.0,
	0.0, &calcNistRat42, &calcNistRat42_p };

static double calcNistRat43( const double* const x, const int N )
{
	const int pn = 15;
	static const double py[] = {
		16.08, 33.83, 65.8, 97.2, 191.55, 326.2, 386.87, 520.53, 590.03, 651.92, 724.93, 699.56, 689.96, 637.56, 717.41, };

	static const double px[] = {
		1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]/(pow(1+exp(x[1]-x[2]*px[i]),1/x[3]));
		s += d * d;
	}

	return( s );
}

static void calcNistRat43_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 69.964; maxv[ 0 ] = 1329.3;
	minv[ 1 ] = 0.52771; maxv[ 1 ] = 10.027;
	minv[ 2 ] = 0.075963; maxv[ 2 ] = 1.4433;
	minv[ 3 ] = 0.12792; maxv[ 3 ] = 2.4306;

	*optv = 8.7864049080e+003;
}

static const CTestFn TestFnNistRat43 = { "NistRat43", 4, 0.0, 0.0,
	0.0, &calcNistRat43, &calcNistRat43_p };

static double calcNistRoszman1( const double* const x, const int N )
{
	const int pn = 25;
	static const double py[] = {
		0.252429, 0.252141, 0.251809, 0.297989, 0.296257, 0.295319, 0.339603, 0.337731, 0.33382, 0.38951, 0.386998, 0.438864, 0.434887, 0.427893, 0.471568, 0.461699, 0.461144, 0.513532, 0.506641, 0.505062, 0.535648, 0.533726, 0.568064, 0.612886, 0.624169, };

	static const double px[] = {
		-4868.68, -4868.09, -4867.41, -3375.19, -3373.14, -3372.03, -2473.74, -2472.35, -2469.45, -1894.65, -1893.4, -1497.24, -1495.85, -1493.41, -1208.68, -1206.18, -1206.04, -997.92, -996.61, -996.31, -834.94, -834.66, -710.03, -530.16, -464.17, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= x[0]-x[1]*px[i]-atan(x[2]/(px[i]-x[3]))/M_PI;
		s += d * d;
	}

	return( s );
}

static void calcNistRoszman1_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 0.020197; maxv[ 0 ] = 0.38374;
	minv[ 1 ] = -1.1771e-005; maxv[ 1 ] = -6.1954e-007;
	minv[ 2 ] = 120.45; maxv[ 2 ] = 2288.5;
	minv[ 3 ] = -344.55; maxv[ 3 ] = -18.134;

	*optv = 4.9484847331e-004;
}

static const CTestFn TestFnNistRoszman1 = { "NistRoszman1", 4, 0.0, 0.0,
	0.0, &calcNistRoszman1, &calcNistRoszman1_p };

static double calcNistThurber( const double* const x, const int N )
{
	const int pn = 37;
	static const double py[] = {
		80.574, 84.248, 87.264, 87.195, 89.076, 89.608, 89.868, 90.101, 92.405, 95.854, 100.696, 101.06, 401.672, 390.724, 567.534, 635.316, 733.054, 759.087, 894.206, 990.785, 1090.11, 1080.91, 1122.64, 1178.35, 1260.53, 1273.51, 1288.34, 1327.54, 1353.86, 1414.51, 1425.21, 1421.38, 1442.96, 1464.35, 1468.7, 1447.89, 1457.63, };

	static const double px[] = {
		-3.067, -2.981, -2.921, -2.912, -2.84, -2.797, -2.702, -2.699, -2.633, -2.481, -2.363, -2.322, -1.501, -1.46, -1.274, -1.212, -1.1, -1.046, -0.915, -0.714, -0.566, -0.545, -0.4, -0.309, -0.109, -0.103, 0.01, 0.119, 0.377, 0.79, 0.963, 1.006, 1.115, 1.572, 1.841, 2.047, 2.2, };

	double s = 0.0;
	int i;

	for( i = 0; i < pn; i++ )
	{
		double d = py[ i ];
		d -= (x[0]+x[1]*px[i]+x[2]*sqr(px[i])+x[3]*pow(px[i],3.0))/
			(1+x[4]*px[i]+x[5]*sqr(px[i])+x[6]*pow(px[i],3.0));

		s += d * d;
	}

	return( s );
}

static void calcNistThurber_p( double* const minv, double* const maxv,
	const int N, double* const optv )
{
	minv[ 0 ] = 128.81; maxv[ 0 ] = 2447.5;
	minv[ 1 ] = 149.11; maxv[ 1 ] = 2833.1;
	minv[ 2 ] = 58.324; maxv[ 2 ] = 1108.2;
	minv[ 3 ] = 7.5417; maxv[ 3 ] = 143.29;
	minv[ 4 ] = 0.09663; maxv[ 4 ] = 1.836;
	minv[ 5 ] = 0.039797; maxv[ 5 ] = 0.75615;
	minv[ 6 ] = 0.0049727; maxv[ 6 ] = 0.094482;

	*optv = 5.6429246855e+003;
}

static const CTestFn TestFnNistThurber = { "NistThurber", 7, 0.0, 0.0,
	0.0, &calcNistThurber, &calcNistThurber_p };

const CTestFn* TestFnNist[] = {
	&TestFnNistBennett5, &TestFnNistBoxBOD, &TestFnNistChwirut1, &TestFnNistChwirut2, &TestFnNistDanWood, &TestFnNistENSO, &TestFnNistEckerle4, &TestFnNistGauss1, &TestFnNistGauss2, &TestFnNistGauss3, &TestFnNistHahn1, &TestFnNistKirby2, &TestFnNistLanczos1, &TestFnNistLanczos2, &TestFnNistLanczos3, &TestFnNistMGH09, &TestFnNistMGH10, &TestFnNistMGH17, &TestFnNistMisra1a, &TestFnNistMisra1b, &TestFnNistMisra1c, &TestFnNistMisra1d, &TestFnNistNelson, &TestFnNistRat42, &TestFnNistRat43, &TestFnNistRoszman1, &TestFnNistThurber, NULL };

int main()
{
	CTester Tester;

	Tester.init( -0.000001, 10, 5000, true );
	Tester.addCorpus( 14, TestFnNist, false, false );

	Tester.run();
}
